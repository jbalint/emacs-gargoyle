#+TITLE: Gargoyle Internals

A collection of descriptions of internals.

* Java Class Hierarchy

  A copy of the Java class hierarchy is (lazily) maintained in the
  Lisp address space.

  A class is a plist:

#+BEGIN_SRC elisp
    (:name java.util.ArrayList
     :superclass java.util.AbstractList
     :interfaces (java.io.Serializable
                  java.lang.Cloneable
                  java.lang.Iterable
                  java.util.Collection
                  java.util.List
                  java.util.RandomAccess)
     :methods methodList
     :fields fieldList)
#+END_SRC

  A method is a plist (TODO put modifiers here):

#+BEGIN_SRC elisp
  (:name iterator
   :returnType java.util.Iterator
   :argumentTypes nil)

  (:name contains
   :returnType boolean
   :argumentTypes (java.lang.Object))
#+END_SRC

  A field is a plist:

#+BEGIN_SRC elisp
  (:name name
   :type java.lang.String)
#+END_SRC

* Lisp Representation of Java Objects

  In C code, a Java object is represented by a pointer. When objects
  are returned from C code, they are wrapped as Lisp structures by
  calling =gg--new-object=. When we say "Java object", we are
  generally referring to a Lisp-wrapped version of the object. When we
  say *raw object*, we are referring to the List representation of the
  pointer.

  Functions ending with =-raw= accept /raw objects/ as arguments. All
  others accept Java objects.

  c.f. =gg-objectp=

* Glossary

  + *raw object* - a List =userptr= of a C =jobject=.
